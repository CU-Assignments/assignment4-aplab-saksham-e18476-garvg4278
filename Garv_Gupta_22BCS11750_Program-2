import java.util.*;

class Solution {
    public List<List<Integer>> getSkyline(int[][] buildings) {
        List<int[]> height = new ArrayList<>();
        for (int[] b : buildings) {
            height.add(new int[] {b[0], -b[2]});
            height.add(new int[] {b[1], b[2]});
        }
        
        Collections.sort(height, (a, b) -> {
            if (a[0] != b[0]) {
                return a[0] - b[0];
            }
            return a[1] - b[1];
        });
        
        List<List<Integer>> result = new ArrayList<>();
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        pq.offer(0);
        int prev = 0;
        
        for (int[] h : height) {
            if (h[1] < 0) {
                pq.offer(-h[1]);
            } else {
                pq.remove(h[1]);
            }
            int curr = pq.peek();
            if (prev != curr) {
                result.add(Arrays.asList(h[0], curr));
                prev = curr;
            }
        }
        
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int[][] buildings = new int[n][3];
        for (int i = 0; i < n; i++) {
            buildings[i][0] = scanner.nextInt();
            buildings[i][1] = scanner.nextInt();
            buildings[i][2] = scanner.nextInt();
        }
        
        Solution solution = new Solution();
        List<List<Integer>> result = solution.getSkyline(buildings);
        for (List<Integer> point : result) {
            System.out.println(point);
        }
    }
}
